#include <WiFi.h>
#include <esp_camera.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "mbedtls/base64.h"
#include "FirebaseESP32.h"

FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

const char* ssid = " ";
const char* password = " ";

#define FIREBASE_HOST "https://esp32cam-9798f-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "ahfRu6u4RoMrot3tRVh1ZRnqb2PeNb1JXfPkoOsw"
#define FIREBASE_API_KEY "AIzaSyAEZUgNty9H4ykkNYgOsKiwQbBbBWK1utg"
#define USER_EMAIL "cybrin101@gmail.com"
#define USER_PASSWORD "Sach03280."

// CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);

  Serial.begin(115200);
  delay(1000);

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    delay(500);
    Serial.print(".");
    retries++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi connection failed.");
    return;
  }
  Serial.println("\nWiFi connected!");

  // Camera config
  camera_config_t configCam;
  configCam.ledc_channel = LEDC_CHANNEL_0;
  configCam.ledc_timer = LEDC_TIMER_0;
  configCam.pin_d0 = Y2_GPIO_NUM;
  configCam.pin_d1 = Y3_GPIO_NUM;
  configCam.pin_d2 = Y4_GPIO_NUM;
  configCam.pin_d3 = Y5_GPIO_NUM;
  configCam.pin_d4 = Y6_GPIO_NUM;
  configCam.pin_d5 = Y7_GPIO_NUM;
  configCam.pin_d6 = Y8_GPIO_NUM;
  configCam.pin_d7 = Y9_GPIO_NUM;
  configCam.pin_xclk = XCLK_GPIO_NUM;
  configCam.pin_pclk = PCLK_GPIO_NUM;
  configCam.pin_vsync = VSYNC_GPIO_NUM;
  configCam.pin_href = HREF_GPIO_NUM;
  configCam.pin_sscb_sda = SIOD_GPIO_NUM;
  configCam.pin_sscb_scl = SIOC_GPIO_NUM;
  configCam.pin_pwdn = PWDN_GPIO_NUM;
  configCam.pin_reset = RESET_GPIO_NUM;
  configCam.xclk_freq_hz = 20000000;
  configCam.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    configCam.frame_size = FRAMESIZE_UXGA;
    configCam.jpeg_quality = 10;
    configCam.fb_count = 2;
  } else {
    configCam.frame_size = FRAMESIZE_SVGA;
    configCam.jpeg_quality = 12;
    configCam.fb_count = 1;
  }

  Serial.println("Initializing camera...");
  esp_err_t err = esp_camera_init(&configCam);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x\n", err);
    delay(1000);
    ESP.restart();
  }
  Serial.println("Camera initialized successfully.");

  sensor_t *s = esp_camera_sensor_get();
  s->set_framesize(s, FRAMESIZE_QQVGA);

  // Firebase config
  config.api_key = FIREBASE_API_KEY;
  config.database_url = FIREBASE_HOST;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  Serial.println("Connecting to Firebase...");
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("Firebase connected.");
}

void loop() {
  Serial.println("Capturing image...");
  String base64Image = Photo2Base64();

  if (base64Image == "") {
    Serial.println("Failed to capture or encode image.");
    delay(10000);
    return;
  }

  FirebaseJson json;
  json.set("photo", base64Image);

  Serial.println("Uploading image to Firebase...");
  if (Firebase.RTDB.pushJSON(&firebaseData, "/esp32-cam", &json)) {
    Serial.println("Image uploaded successfully!");
    Serial.println(firebaseData.dataPath());
    Serial.println(firebaseData.pushName());
  } else {
    Serial.print("Firebase upload failed: ");
    Serial.println(firebaseData.errorReason());
  }

  delay(10000);  // Wait 10 seconds before next image
}

String Photo2Base64() {
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return "";
  }

  Serial.println("Encoding image to Base64...");
  size_t encodedLen;
  mbedtls_base64_encode(NULL, 0, &encodedLen, fb->buf, fb->len);
  unsigned char* base64Buf = (unsigned char*)malloc(encodedLen + 1);

  if (!base64Buf) {
    Serial.println("Memory allocation failed");
    esp_camera_fb_return(fb);
    return "";
  }

  if (mbedtls_base64_encode(base64Buf, encodedLen, &encodedLen, fb->buf, fb->len) != 0) {
    Serial.println("Base64 encoding failed");
    free(base64Buf);
    esp_camera_fb_return(fb);
    return "";
  }

  base64Buf[encodedLen] = '\0';
  String imageFile = "data:image/jpeg;base64," + String((char*)base64Buf);

  free(base64Buf);
  esp_camera_fb_return(fb);
  return imageFile;
}
